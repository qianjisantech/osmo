// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"osmo/gen/model"
)

func newPolarisTaskRecord(db *gorm.DB, opts ...gen.DOOption) polarisTaskRecord {
	_polarisTaskRecord := polarisTaskRecord{}

	_polarisTaskRecord.polarisTaskRecordDo.UseDB(db, opts...)
	_polarisTaskRecord.polarisTaskRecordDo.UseModel(&model.PolarisTaskRecord{})

	tableName := _polarisTaskRecord.polarisTaskRecordDo.TableName()
	_polarisTaskRecord.ALL = field.NewAsterisk(tableName)
	_polarisTaskRecord.ID = field.NewInt64(tableName, "id")
	_polarisTaskRecord.Name = field.NewString(tableName, "name")
	_polarisTaskRecord.Status = field.NewString(tableName, "status")
	_polarisTaskRecord.IsDeleted = field.NewBool(tableName, "is_deleted")
	_polarisTaskRecord.DeletedTime = field.NewTime(tableName, "deleted_time")
	_polarisTaskRecord.DeletedBy = field.NewString(tableName, "deleted_by")
	_polarisTaskRecord.DeletedByName = field.NewString(tableName, "deleted_by_name")
	_polarisTaskRecord.CreateTime = field.NewTime(tableName, "create_time")
	_polarisTaskRecord.CreateBy = field.NewString(tableName, "create_by")
	_polarisTaskRecord.CreateByName = field.NewString(tableName, "create_by_name")
	_polarisTaskRecord.UpdateTime = field.NewTime(tableName, "update_time")
	_polarisTaskRecord.UpdateBy = field.NewString(tableName, "update_by")
	_polarisTaskRecord.UpdateByName = field.NewString(tableName, "update_by_name")
	_polarisTaskRecord.RuleID = field.NewInt64(tableName, "rule_id")
	_polarisTaskRecord.RuleName = field.NewString(tableName, "rule_name")
	_polarisTaskRecord.StrategyCode = field.NewString(tableName, "strategy_code")
	_polarisTaskRecord.StrategyName = field.NewString(tableName, "strategy_name")
	_polarisTaskRecord.AgentID = field.NewString(tableName, "agent_id")
	_polarisTaskRecord.AgentName = field.NewString(tableName, "agent_name")
	_polarisTaskRecord.StartTime = field.NewTime(tableName, "start_time")
	_polarisTaskRecord.EndTime = field.NewTime(tableName, "end_time")
	_polarisTaskRecord.Description = field.NewString(tableName, "description")
	_polarisTaskRecord.ListenPort = field.NewString(tableName, "listen_port")
	_polarisTaskRecord.ExecuteTime = field.NewTime(tableName, "execute_time")
	_polarisTaskRecord.MonitorCenterID = field.NewString(tableName, "monitor_center_id")
	_polarisTaskRecord.MonitorCenterName = field.NewString(tableName, "monitor_center_name")
	_polarisTaskRecord.MonitorCenterURL = field.NewString(tableName, "monitor_center_url")
	_polarisTaskRecord.FailReason = field.NewString(tableName, "fail_reason")
	_polarisTaskRecord.TotalRecordAPI = field.NewInt32(tableName, "total_record_api")
	_polarisTaskRecord.SuccessRecordAPI = field.NewInt32(tableName, "success_record_api")
	_polarisTaskRecord.FailRecordAPI = field.NewInt32(tableName, "fail_record_api")

	_polarisTaskRecord.fillFieldMap()

	return _polarisTaskRecord
}

type polarisTaskRecord struct {
	polarisTaskRecordDo polarisTaskRecordDo

	ALL               field.Asterisk
	ID                field.Int64
	Name              field.String
	Status            field.String // 任务状态(pending 待定 running 进行中 success 运行成功 failed 运行失败 canceled 已取消 timeout 超时  skipped 跳过 aborted 中止 waiting 等待 paused 暂停）
	IsDeleted         field.Bool   // 逻辑删除标识（0 未删除；1 已删除）
	DeletedTime       field.Time
	DeletedBy         field.String
	DeletedByName     field.String
	CreateTime        field.Time
	CreateBy          field.String
	CreateByName      field.String
	UpdateTime        field.Time
	UpdateBy          field.String
	UpdateByName      field.String
	RuleID            field.Int64  // 规则id
	RuleName          field.String // 规则名称
	StrategyCode      field.String
	StrategyName      field.String // 策略名称
	AgentID           field.String
	AgentName         field.String
	StartTime         field.Time
	EndTime           field.Time
	Description       field.String // 描述
	ListenPort        field.String
	ExecuteTime       field.Time
	MonitorCenterID   field.String
	MonitorCenterName field.String
	MonitorCenterURL  field.String
	FailReason        field.String
	TotalRecordAPI    field.Int32
	SuccessRecordAPI  field.Int32
	FailRecordAPI     field.Int32

	fieldMap map[string]field.Expr
}

func (p polarisTaskRecord) Table(newTableName string) *polarisTaskRecord {
	p.polarisTaskRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p polarisTaskRecord) As(alias string) *polarisTaskRecord {
	p.polarisTaskRecordDo.DO = *(p.polarisTaskRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *polarisTaskRecord) updateTableName(table string) *polarisTaskRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.Status = field.NewString(table, "status")
	p.IsDeleted = field.NewBool(table, "is_deleted")
	p.DeletedTime = field.NewTime(table, "deleted_time")
	p.DeletedBy = field.NewString(table, "deleted_by")
	p.DeletedByName = field.NewString(table, "deleted_by_name")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewString(table, "create_by")
	p.CreateByName = field.NewString(table, "create_by_name")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateBy = field.NewString(table, "update_by")
	p.UpdateByName = field.NewString(table, "update_by_name")
	p.RuleID = field.NewInt64(table, "rule_id")
	p.RuleName = field.NewString(table, "rule_name")
	p.StrategyCode = field.NewString(table, "strategy_code")
	p.StrategyName = field.NewString(table, "strategy_name")
	p.AgentID = field.NewString(table, "agent_id")
	p.AgentName = field.NewString(table, "agent_name")
	p.StartTime = field.NewTime(table, "start_time")
	p.EndTime = field.NewTime(table, "end_time")
	p.Description = field.NewString(table, "description")
	p.ListenPort = field.NewString(table, "listen_port")
	p.ExecuteTime = field.NewTime(table, "execute_time")
	p.MonitorCenterID = field.NewString(table, "monitor_center_id")
	p.MonitorCenterName = field.NewString(table, "monitor_center_name")
	p.MonitorCenterURL = field.NewString(table, "monitor_center_url")
	p.FailReason = field.NewString(table, "fail_reason")
	p.TotalRecordAPI = field.NewInt32(table, "total_record_api")
	p.SuccessRecordAPI = field.NewInt32(table, "success_record_api")
	p.FailRecordAPI = field.NewInt32(table, "fail_record_api")

	p.fillFieldMap()

	return p
}

func (p *polarisTaskRecord) WithContext(ctx context.Context) IPolarisTaskRecordDo {
	return p.polarisTaskRecordDo.WithContext(ctx)
}

func (p polarisTaskRecord) TableName() string { return p.polarisTaskRecordDo.TableName() }

func (p polarisTaskRecord) Alias() string { return p.polarisTaskRecordDo.Alias() }

func (p polarisTaskRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.polarisTaskRecordDo.Columns(cols...)
}

func (p *polarisTaskRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *polarisTaskRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 31)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["status"] = p.Status
	p.fieldMap["is_deleted"] = p.IsDeleted
	p.fieldMap["deleted_time"] = p.DeletedTime
	p.fieldMap["deleted_by"] = p.DeletedBy
	p.fieldMap["deleted_by_name"] = p.DeletedByName
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_by_name"] = p.CreateByName
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_by_name"] = p.UpdateByName
	p.fieldMap["rule_id"] = p.RuleID
	p.fieldMap["rule_name"] = p.RuleName
	p.fieldMap["strategy_code"] = p.StrategyCode
	p.fieldMap["strategy_name"] = p.StrategyName
	p.fieldMap["agent_id"] = p.AgentID
	p.fieldMap["agent_name"] = p.AgentName
	p.fieldMap["start_time"] = p.StartTime
	p.fieldMap["end_time"] = p.EndTime
	p.fieldMap["description"] = p.Description
	p.fieldMap["listen_port"] = p.ListenPort
	p.fieldMap["execute_time"] = p.ExecuteTime
	p.fieldMap["monitor_center_id"] = p.MonitorCenterID
	p.fieldMap["monitor_center_name"] = p.MonitorCenterName
	p.fieldMap["monitor_center_url"] = p.MonitorCenterURL
	p.fieldMap["fail_reason"] = p.FailReason
	p.fieldMap["total_record_api"] = p.TotalRecordAPI
	p.fieldMap["success_record_api"] = p.SuccessRecordAPI
	p.fieldMap["fail_record_api"] = p.FailRecordAPI
}

func (p polarisTaskRecord) clone(db *gorm.DB) polarisTaskRecord {
	p.polarisTaskRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p polarisTaskRecord) replaceDB(db *gorm.DB) polarisTaskRecord {
	p.polarisTaskRecordDo.ReplaceDB(db)
	return p
}

type polarisTaskRecordDo struct{ gen.DO }

type IPolarisTaskRecordDo interface {
	gen.SubQuery
	Debug() IPolarisTaskRecordDo
	WithContext(ctx context.Context) IPolarisTaskRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPolarisTaskRecordDo
	WriteDB() IPolarisTaskRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPolarisTaskRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPolarisTaskRecordDo
	Not(conds ...gen.Condition) IPolarisTaskRecordDo
	Or(conds ...gen.Condition) IPolarisTaskRecordDo
	Select(conds ...field.Expr) IPolarisTaskRecordDo
	Where(conds ...gen.Condition) IPolarisTaskRecordDo
	Order(conds ...field.Expr) IPolarisTaskRecordDo
	Distinct(cols ...field.Expr) IPolarisTaskRecordDo
	Omit(cols ...field.Expr) IPolarisTaskRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo
	Group(cols ...field.Expr) IPolarisTaskRecordDo
	Having(conds ...gen.Condition) IPolarisTaskRecordDo
	Limit(limit int) IPolarisTaskRecordDo
	Offset(offset int) IPolarisTaskRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisTaskRecordDo
	Unscoped() IPolarisTaskRecordDo
	Create(values ...*model.PolarisTaskRecord) error
	CreateInBatches(values []*model.PolarisTaskRecord, batchSize int) error
	Save(values ...*model.PolarisTaskRecord) error
	First() (*model.PolarisTaskRecord, error)
	Take() (*model.PolarisTaskRecord, error)
	Last() (*model.PolarisTaskRecord, error)
	Find() ([]*model.PolarisTaskRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisTaskRecord, err error)
	FindInBatches(result *[]*model.PolarisTaskRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PolarisTaskRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPolarisTaskRecordDo
	Assign(attrs ...field.AssignExpr) IPolarisTaskRecordDo
	Joins(fields ...field.RelationField) IPolarisTaskRecordDo
	Preload(fields ...field.RelationField) IPolarisTaskRecordDo
	FirstOrInit() (*model.PolarisTaskRecord, error)
	FirstOrCreate() (*model.PolarisTaskRecord, error)
	FindByPage(offset int, limit int) (result []*model.PolarisTaskRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPolarisTaskRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p polarisTaskRecordDo) Debug() IPolarisTaskRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p polarisTaskRecordDo) WithContext(ctx context.Context) IPolarisTaskRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p polarisTaskRecordDo) ReadDB() IPolarisTaskRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p polarisTaskRecordDo) WriteDB() IPolarisTaskRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p polarisTaskRecordDo) Session(config *gorm.Session) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p polarisTaskRecordDo) Clauses(conds ...clause.Expression) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p polarisTaskRecordDo) Returning(value interface{}, columns ...string) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p polarisTaskRecordDo) Not(conds ...gen.Condition) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p polarisTaskRecordDo) Or(conds ...gen.Condition) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p polarisTaskRecordDo) Select(conds ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p polarisTaskRecordDo) Where(conds ...gen.Condition) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p polarisTaskRecordDo) Order(conds ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p polarisTaskRecordDo) Distinct(cols ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p polarisTaskRecordDo) Omit(cols ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p polarisTaskRecordDo) Join(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p polarisTaskRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p polarisTaskRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p polarisTaskRecordDo) Group(cols ...field.Expr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p polarisTaskRecordDo) Having(conds ...gen.Condition) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p polarisTaskRecordDo) Limit(limit int) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p polarisTaskRecordDo) Offset(offset int) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p polarisTaskRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p polarisTaskRecordDo) Unscoped() IPolarisTaskRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p polarisTaskRecordDo) Create(values ...*model.PolarisTaskRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p polarisTaskRecordDo) CreateInBatches(values []*model.PolarisTaskRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p polarisTaskRecordDo) Save(values ...*model.PolarisTaskRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p polarisTaskRecordDo) First() (*model.PolarisTaskRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTaskRecord), nil
	}
}

func (p polarisTaskRecordDo) Take() (*model.PolarisTaskRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTaskRecord), nil
	}
}

func (p polarisTaskRecordDo) Last() (*model.PolarisTaskRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTaskRecord), nil
	}
}

func (p polarisTaskRecordDo) Find() ([]*model.PolarisTaskRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PolarisTaskRecord), err
}

func (p polarisTaskRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisTaskRecord, err error) {
	buf := make([]*model.PolarisTaskRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p polarisTaskRecordDo) FindInBatches(result *[]*model.PolarisTaskRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p polarisTaskRecordDo) Attrs(attrs ...field.AssignExpr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p polarisTaskRecordDo) Assign(attrs ...field.AssignExpr) IPolarisTaskRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p polarisTaskRecordDo) Joins(fields ...field.RelationField) IPolarisTaskRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p polarisTaskRecordDo) Preload(fields ...field.RelationField) IPolarisTaskRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p polarisTaskRecordDo) FirstOrInit() (*model.PolarisTaskRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTaskRecord), nil
	}
}

func (p polarisTaskRecordDo) FirstOrCreate() (*model.PolarisTaskRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTaskRecord), nil
	}
}

func (p polarisTaskRecordDo) FindByPage(offset int, limit int) (result []*model.PolarisTaskRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p polarisTaskRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p polarisTaskRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p polarisTaskRecordDo) Delete(models ...*model.PolarisTaskRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *polarisTaskRecordDo) withDO(do gen.Dao) *polarisTaskRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
