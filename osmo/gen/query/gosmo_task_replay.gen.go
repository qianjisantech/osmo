// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"osmo/gen/model"
)

func newGosmoTaskReplay(db *gorm.DB, opts ...gen.DOOption) gosmoTaskReplay {
	_gosmoTaskReplay := gosmoTaskReplay{}

	_gosmoTaskReplay.gosmoTaskReplayDo.UseDB(db, opts...)
	_gosmoTaskReplay.gosmoTaskReplayDo.UseModel(&model.GosmoTaskReplay{})

	tableName := _gosmoTaskReplay.gosmoTaskReplayDo.TableName()
	_gosmoTaskReplay.ALL = field.NewAsterisk(tableName)
	_gosmoTaskReplay.ID = field.NewInt64(tableName, "id")
	_gosmoTaskReplay.Name = field.NewString(tableName, "name")
	_gosmoTaskReplay.Status = field.NewString(tableName, "status")
	_gosmoTaskReplay.IsDeleted = field.NewBool(tableName, "is_deleted")
	_gosmoTaskReplay.DeletedTime = field.NewTime(tableName, "deleted_time")
	_gosmoTaskReplay.DeletedBy = field.NewString(tableName, "deleted_by")
	_gosmoTaskReplay.DeletedByName = field.NewString(tableName, "deleted_by_name")
	_gosmoTaskReplay.CreateTime = field.NewTime(tableName, "create_time")
	_gosmoTaskReplay.CreateBy = field.NewString(tableName, "create_by")
	_gosmoTaskReplay.CreateByName = field.NewString(tableName, "create_by_name")
	_gosmoTaskReplay.UpdateTime = field.NewTime(tableName, "update_time")
	_gosmoTaskReplay.UpdateBy = field.NewString(tableName, "update_by")
	_gosmoTaskReplay.UpdateByName = field.NewString(tableName, "update_by_name")
	_gosmoTaskReplay.RuleID = field.NewInt64(tableName, "rule_id")
	_gosmoTaskReplay.RuleName = field.NewString(tableName, "rule_name")
	_gosmoTaskReplay.StrategyID = field.NewInt64(tableName, "strategy_id")
	_gosmoTaskReplay.StrategyName = field.NewString(tableName, "strategy_name")
	_gosmoTaskReplay.AgentID = field.NewInt64(tableName, "agent_id")
	_gosmoTaskReplay.AgentName = field.NewString(tableName, "agent_name")

	_gosmoTaskReplay.fillFieldMap()

	return _gosmoTaskReplay
}

type gosmoTaskReplay struct {
	gosmoTaskReplayDo gosmoTaskReplayDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String
	Status        field.String // 任务状态(pending 待定 running 进行中 success 运行成功 failed 运行失败 canceled 已取消 timeout 超时  skipped 跳过 aborted 中止 waiting 等待 paused 暂停）
	IsDeleted     field.Bool   // 逻辑删除标识（0 未删除；1 已删除）
	DeletedTime   field.Time
	DeletedBy     field.String
	DeletedByName field.String
	CreateTime    field.Time
	CreateBy      field.String
	CreateByName  field.String
	UpdateTime    field.Time
	UpdateBy      field.String
	UpdateByName  field.String
	RuleID        field.Int64  // 规则id
	RuleName      field.String // 规则名称
	StrategyID    field.Int64  // 策略id
	StrategyName  field.String // 策略名称
	AgentID       field.Int64
	AgentName     field.String

	fieldMap map[string]field.Expr
}

func (g gosmoTaskReplay) Table(newTableName string) *gosmoTaskReplay {
	g.gosmoTaskReplayDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gosmoTaskReplay) As(alias string) *gosmoTaskReplay {
	g.gosmoTaskReplayDo.DO = *(g.gosmoTaskReplayDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gosmoTaskReplay) updateTableName(table string) *gosmoTaskReplay {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewString(table, "status")
	g.IsDeleted = field.NewBool(table, "is_deleted")
	g.DeletedTime = field.NewTime(table, "deleted_time")
	g.DeletedBy = field.NewString(table, "deleted_by")
	g.DeletedByName = field.NewString(table, "deleted_by_name")
	g.CreateTime = field.NewTime(table, "create_time")
	g.CreateBy = field.NewString(table, "create_by")
	g.CreateByName = field.NewString(table, "create_by_name")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.UpdateBy = field.NewString(table, "update_by")
	g.UpdateByName = field.NewString(table, "update_by_name")
	g.RuleID = field.NewInt64(table, "rule_id")
	g.RuleName = field.NewString(table, "rule_name")
	g.StrategyID = field.NewInt64(table, "strategy_id")
	g.StrategyName = field.NewString(table, "strategy_name")
	g.AgentID = field.NewInt64(table, "agent_id")
	g.AgentName = field.NewString(table, "agent_name")

	g.fillFieldMap()

	return g
}

func (g *gosmoTaskReplay) WithContext(ctx context.Context) IGosmoTaskReplayDo {
	return g.gosmoTaskReplayDo.WithContext(ctx)
}

func (g gosmoTaskReplay) TableName() string { return g.gosmoTaskReplayDo.TableName() }

func (g gosmoTaskReplay) Alias() string { return g.gosmoTaskReplayDo.Alias() }

func (g gosmoTaskReplay) Columns(cols ...field.Expr) gen.Columns {
	return g.gosmoTaskReplayDo.Columns(cols...)
}

func (g *gosmoTaskReplay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gosmoTaskReplay) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 19)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["deleted_time"] = g.DeletedTime
	g.fieldMap["deleted_by"] = g.DeletedBy
	g.fieldMap["deleted_by_name"] = g.DeletedByName
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["create_by_name"] = g.CreateByName
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["update_by"] = g.UpdateBy
	g.fieldMap["update_by_name"] = g.UpdateByName
	g.fieldMap["rule_id"] = g.RuleID
	g.fieldMap["rule_name"] = g.RuleName
	g.fieldMap["strategy_id"] = g.StrategyID
	g.fieldMap["strategy_name"] = g.StrategyName
	g.fieldMap["agent_id"] = g.AgentID
	g.fieldMap["agent_name"] = g.AgentName
}

func (g gosmoTaskReplay) clone(db *gorm.DB) gosmoTaskReplay {
	g.gosmoTaskReplayDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gosmoTaskReplay) replaceDB(db *gorm.DB) gosmoTaskReplay {
	g.gosmoTaskReplayDo.ReplaceDB(db)
	return g
}

type gosmoTaskReplayDo struct{ gen.DO }

type IGosmoTaskReplayDo interface {
	gen.SubQuery
	Debug() IGosmoTaskReplayDo
	WithContext(ctx context.Context) IGosmoTaskReplayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGosmoTaskReplayDo
	WriteDB() IGosmoTaskReplayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGosmoTaskReplayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGosmoTaskReplayDo
	Not(conds ...gen.Condition) IGosmoTaskReplayDo
	Or(conds ...gen.Condition) IGosmoTaskReplayDo
	Select(conds ...field.Expr) IGosmoTaskReplayDo
	Where(conds ...gen.Condition) IGosmoTaskReplayDo
	Order(conds ...field.Expr) IGosmoTaskReplayDo
	Distinct(cols ...field.Expr) IGosmoTaskReplayDo
	Omit(cols ...field.Expr) IGosmoTaskReplayDo
	Join(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo
	Group(cols ...field.Expr) IGosmoTaskReplayDo
	Having(conds ...gen.Condition) IGosmoTaskReplayDo
	Limit(limit int) IGosmoTaskReplayDo
	Offset(offset int) IGosmoTaskReplayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoTaskReplayDo
	Unscoped() IGosmoTaskReplayDo
	Create(values ...*model.GosmoTaskReplay) error
	CreateInBatches(values []*model.GosmoTaskReplay, batchSize int) error
	Save(values ...*model.GosmoTaskReplay) error
	First() (*model.GosmoTaskReplay, error)
	Take() (*model.GosmoTaskReplay, error)
	Last() (*model.GosmoTaskReplay, error)
	Find() ([]*model.GosmoTaskReplay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoTaskReplay, err error)
	FindInBatches(result *[]*model.GosmoTaskReplay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GosmoTaskReplay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGosmoTaskReplayDo
	Assign(attrs ...field.AssignExpr) IGosmoTaskReplayDo
	Joins(fields ...field.RelationField) IGosmoTaskReplayDo
	Preload(fields ...field.RelationField) IGosmoTaskReplayDo
	FirstOrInit() (*model.GosmoTaskReplay, error)
	FirstOrCreate() (*model.GosmoTaskReplay, error)
	FindByPage(offset int, limit int) (result []*model.GosmoTaskReplay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGosmoTaskReplayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gosmoTaskReplayDo) Debug() IGosmoTaskReplayDo {
	return g.withDO(g.DO.Debug())
}

func (g gosmoTaskReplayDo) WithContext(ctx context.Context) IGosmoTaskReplayDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gosmoTaskReplayDo) ReadDB() IGosmoTaskReplayDo {
	return g.Clauses(dbresolver.Read)
}

func (g gosmoTaskReplayDo) WriteDB() IGosmoTaskReplayDo {
	return g.Clauses(dbresolver.Write)
}

func (g gosmoTaskReplayDo) Session(config *gorm.Session) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Session(config))
}

func (g gosmoTaskReplayDo) Clauses(conds ...clause.Expression) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gosmoTaskReplayDo) Returning(value interface{}, columns ...string) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gosmoTaskReplayDo) Not(conds ...gen.Condition) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gosmoTaskReplayDo) Or(conds ...gen.Condition) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gosmoTaskReplayDo) Select(conds ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gosmoTaskReplayDo) Where(conds ...gen.Condition) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gosmoTaskReplayDo) Order(conds ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gosmoTaskReplayDo) Distinct(cols ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gosmoTaskReplayDo) Omit(cols ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gosmoTaskReplayDo) Join(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gosmoTaskReplayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gosmoTaskReplayDo) RightJoin(table schema.Tabler, on ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gosmoTaskReplayDo) Group(cols ...field.Expr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gosmoTaskReplayDo) Having(conds ...gen.Condition) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gosmoTaskReplayDo) Limit(limit int) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gosmoTaskReplayDo) Offset(offset int) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gosmoTaskReplayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gosmoTaskReplayDo) Unscoped() IGosmoTaskReplayDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gosmoTaskReplayDo) Create(values ...*model.GosmoTaskReplay) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gosmoTaskReplayDo) CreateInBatches(values []*model.GosmoTaskReplay, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gosmoTaskReplayDo) Save(values ...*model.GosmoTaskReplay) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gosmoTaskReplayDo) First() (*model.GosmoTaskReplay, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoTaskReplay), nil
	}
}

func (g gosmoTaskReplayDo) Take() (*model.GosmoTaskReplay, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoTaskReplay), nil
	}
}

func (g gosmoTaskReplayDo) Last() (*model.GosmoTaskReplay, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoTaskReplay), nil
	}
}

func (g gosmoTaskReplayDo) Find() ([]*model.GosmoTaskReplay, error) {
	result, err := g.DO.Find()
	return result.([]*model.GosmoTaskReplay), err
}

func (g gosmoTaskReplayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoTaskReplay, err error) {
	buf := make([]*model.GosmoTaskReplay, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gosmoTaskReplayDo) FindInBatches(result *[]*model.GosmoTaskReplay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gosmoTaskReplayDo) Attrs(attrs ...field.AssignExpr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gosmoTaskReplayDo) Assign(attrs ...field.AssignExpr) IGosmoTaskReplayDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gosmoTaskReplayDo) Joins(fields ...field.RelationField) IGosmoTaskReplayDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gosmoTaskReplayDo) Preload(fields ...field.RelationField) IGosmoTaskReplayDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gosmoTaskReplayDo) FirstOrInit() (*model.GosmoTaskReplay, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoTaskReplay), nil
	}
}

func (g gosmoTaskReplayDo) FirstOrCreate() (*model.GosmoTaskReplay, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoTaskReplay), nil
	}
}

func (g gosmoTaskReplayDo) FindByPage(offset int, limit int) (result []*model.GosmoTaskReplay, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gosmoTaskReplayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gosmoTaskReplayDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gosmoTaskReplayDo) Delete(models ...*model.GosmoTaskReplay) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gosmoTaskReplayDo) withDO(do gen.Dao) *gosmoTaskReplayDo {
	g.DO = *do.(*gen.DO)
	return g
}
