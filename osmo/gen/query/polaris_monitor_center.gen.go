// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"osmo/gen/model"
)

func newPolarisMonitorCenter(db *gorm.DB, opts ...gen.DOOption) polarisMonitorCenter {
	_polarisMonitorCenter := polarisMonitorCenter{}

	_polarisMonitorCenter.polarisMonitorCenterDo.UseDB(db, opts...)
	_polarisMonitorCenter.polarisMonitorCenterDo.UseModel(&model.PolarisMonitorCenter{})

	tableName := _polarisMonitorCenter.polarisMonitorCenterDo.TableName()
	_polarisMonitorCenter.ALL = field.NewAsterisk(tableName)
	_polarisMonitorCenter.ID = field.NewInt64(tableName, "id")
	_polarisMonitorCenter.IsDeleted = field.NewBool(tableName, "is_deleted")
	_polarisMonitorCenter.DeletedTime = field.NewTime(tableName, "deleted_time")
	_polarisMonitorCenter.DeletedBy = field.NewString(tableName, "deleted_by")
	_polarisMonitorCenter.DeletedByName = field.NewString(tableName, "deleted_by_name")
	_polarisMonitorCenter.CreateTime = field.NewTime(tableName, "create_time")
	_polarisMonitorCenter.CreateBy = field.NewString(tableName, "create_by")
	_polarisMonitorCenter.CreateByName = field.NewString(tableName, "create_by_name")
	_polarisMonitorCenter.UpdateTime = field.NewTime(tableName, "update_time")
	_polarisMonitorCenter.UpdateBy = field.NewString(tableName, "update_by")
	_polarisMonitorCenter.UpdateByName = field.NewString(tableName, "update_by_name")
	_polarisMonitorCenter.Name = field.NewString(tableName, "name")
	_polarisMonitorCenter.URL = field.NewString(tableName, "url")
	_polarisMonitorCenter.Description = field.NewString(tableName, "description")

	_polarisMonitorCenter.fillFieldMap()

	return _polarisMonitorCenter
}

type polarisMonitorCenter struct {
	polarisMonitorCenterDo polarisMonitorCenterDo

	ALL           field.Asterisk
	ID            field.Int64
	IsDeleted     field.Bool
	DeletedTime   field.Time
	DeletedBy     field.String
	DeletedByName field.String
	CreateTime    field.Time
	CreateBy      field.String
	CreateByName  field.String
	UpdateTime    field.Time
	UpdateBy      field.String
	UpdateByName  field.String
	Name          field.String
	URL           field.String
	Description   field.String

	fieldMap map[string]field.Expr
}

func (p polarisMonitorCenter) Table(newTableName string) *polarisMonitorCenter {
	p.polarisMonitorCenterDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p polarisMonitorCenter) As(alias string) *polarisMonitorCenter {
	p.polarisMonitorCenterDo.DO = *(p.polarisMonitorCenterDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *polarisMonitorCenter) updateTableName(table string) *polarisMonitorCenter {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.IsDeleted = field.NewBool(table, "is_deleted")
	p.DeletedTime = field.NewTime(table, "deleted_time")
	p.DeletedBy = field.NewString(table, "deleted_by")
	p.DeletedByName = field.NewString(table, "deleted_by_name")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewString(table, "create_by")
	p.CreateByName = field.NewString(table, "create_by_name")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateBy = field.NewString(table, "update_by")
	p.UpdateByName = field.NewString(table, "update_by_name")
	p.Name = field.NewString(table, "name")
	p.URL = field.NewString(table, "url")
	p.Description = field.NewString(table, "description")

	p.fillFieldMap()

	return p
}

func (p *polarisMonitorCenter) WithContext(ctx context.Context) IPolarisMonitorCenterDo {
	return p.polarisMonitorCenterDo.WithContext(ctx)
}

func (p polarisMonitorCenter) TableName() string { return p.polarisMonitorCenterDo.TableName() }

func (p polarisMonitorCenter) Alias() string { return p.polarisMonitorCenterDo.Alias() }

func (p polarisMonitorCenter) Columns(cols ...field.Expr) gen.Columns {
	return p.polarisMonitorCenterDo.Columns(cols...)
}

func (p *polarisMonitorCenter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *polarisMonitorCenter) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["is_deleted"] = p.IsDeleted
	p.fieldMap["deleted_time"] = p.DeletedTime
	p.fieldMap["deleted_by"] = p.DeletedBy
	p.fieldMap["deleted_by_name"] = p.DeletedByName
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_by_name"] = p.CreateByName
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_by_name"] = p.UpdateByName
	p.fieldMap["name"] = p.Name
	p.fieldMap["url"] = p.URL
	p.fieldMap["description"] = p.Description
}

func (p polarisMonitorCenter) clone(db *gorm.DB) polarisMonitorCenter {
	p.polarisMonitorCenterDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p polarisMonitorCenter) replaceDB(db *gorm.DB) polarisMonitorCenter {
	p.polarisMonitorCenterDo.ReplaceDB(db)
	return p
}

type polarisMonitorCenterDo struct{ gen.DO }

type IPolarisMonitorCenterDo interface {
	gen.SubQuery
	Debug() IPolarisMonitorCenterDo
	WithContext(ctx context.Context) IPolarisMonitorCenterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPolarisMonitorCenterDo
	WriteDB() IPolarisMonitorCenterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPolarisMonitorCenterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPolarisMonitorCenterDo
	Not(conds ...gen.Condition) IPolarisMonitorCenterDo
	Or(conds ...gen.Condition) IPolarisMonitorCenterDo
	Select(conds ...field.Expr) IPolarisMonitorCenterDo
	Where(conds ...gen.Condition) IPolarisMonitorCenterDo
	Order(conds ...field.Expr) IPolarisMonitorCenterDo
	Distinct(cols ...field.Expr) IPolarisMonitorCenterDo
	Omit(cols ...field.Expr) IPolarisMonitorCenterDo
	Join(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo
	Group(cols ...field.Expr) IPolarisMonitorCenterDo
	Having(conds ...gen.Condition) IPolarisMonitorCenterDo
	Limit(limit int) IPolarisMonitorCenterDo
	Offset(offset int) IPolarisMonitorCenterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisMonitorCenterDo
	Unscoped() IPolarisMonitorCenterDo
	Create(values ...*model.PolarisMonitorCenter) error
	CreateInBatches(values []*model.PolarisMonitorCenter, batchSize int) error
	Save(values ...*model.PolarisMonitorCenter) error
	First() (*model.PolarisMonitorCenter, error)
	Take() (*model.PolarisMonitorCenter, error)
	Last() (*model.PolarisMonitorCenter, error)
	Find() ([]*model.PolarisMonitorCenter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisMonitorCenter, err error)
	FindInBatches(result *[]*model.PolarisMonitorCenter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PolarisMonitorCenter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPolarisMonitorCenterDo
	Assign(attrs ...field.AssignExpr) IPolarisMonitorCenterDo
	Joins(fields ...field.RelationField) IPolarisMonitorCenterDo
	Preload(fields ...field.RelationField) IPolarisMonitorCenterDo
	FirstOrInit() (*model.PolarisMonitorCenter, error)
	FirstOrCreate() (*model.PolarisMonitorCenter, error)
	FindByPage(offset int, limit int) (result []*model.PolarisMonitorCenter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPolarisMonitorCenterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p polarisMonitorCenterDo) Debug() IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Debug())
}

func (p polarisMonitorCenterDo) WithContext(ctx context.Context) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p polarisMonitorCenterDo) ReadDB() IPolarisMonitorCenterDo {
	return p.Clauses(dbresolver.Read)
}

func (p polarisMonitorCenterDo) WriteDB() IPolarisMonitorCenterDo {
	return p.Clauses(dbresolver.Write)
}

func (p polarisMonitorCenterDo) Session(config *gorm.Session) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Session(config))
}

func (p polarisMonitorCenterDo) Clauses(conds ...clause.Expression) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p polarisMonitorCenterDo) Returning(value interface{}, columns ...string) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p polarisMonitorCenterDo) Not(conds ...gen.Condition) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p polarisMonitorCenterDo) Or(conds ...gen.Condition) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p polarisMonitorCenterDo) Select(conds ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p polarisMonitorCenterDo) Where(conds ...gen.Condition) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p polarisMonitorCenterDo) Order(conds ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p polarisMonitorCenterDo) Distinct(cols ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p polarisMonitorCenterDo) Omit(cols ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p polarisMonitorCenterDo) Join(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p polarisMonitorCenterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p polarisMonitorCenterDo) RightJoin(table schema.Tabler, on ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p polarisMonitorCenterDo) Group(cols ...field.Expr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p polarisMonitorCenterDo) Having(conds ...gen.Condition) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p polarisMonitorCenterDo) Limit(limit int) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p polarisMonitorCenterDo) Offset(offset int) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p polarisMonitorCenterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p polarisMonitorCenterDo) Unscoped() IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Unscoped())
}

func (p polarisMonitorCenterDo) Create(values ...*model.PolarisMonitorCenter) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p polarisMonitorCenterDo) CreateInBatches(values []*model.PolarisMonitorCenter, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p polarisMonitorCenterDo) Save(values ...*model.PolarisMonitorCenter) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p polarisMonitorCenterDo) First() (*model.PolarisMonitorCenter, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisMonitorCenter), nil
	}
}

func (p polarisMonitorCenterDo) Take() (*model.PolarisMonitorCenter, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisMonitorCenter), nil
	}
}

func (p polarisMonitorCenterDo) Last() (*model.PolarisMonitorCenter, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisMonitorCenter), nil
	}
}

func (p polarisMonitorCenterDo) Find() ([]*model.PolarisMonitorCenter, error) {
	result, err := p.DO.Find()
	return result.([]*model.PolarisMonitorCenter), err
}

func (p polarisMonitorCenterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisMonitorCenter, err error) {
	buf := make([]*model.PolarisMonitorCenter, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p polarisMonitorCenterDo) FindInBatches(result *[]*model.PolarisMonitorCenter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p polarisMonitorCenterDo) Attrs(attrs ...field.AssignExpr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p polarisMonitorCenterDo) Assign(attrs ...field.AssignExpr) IPolarisMonitorCenterDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p polarisMonitorCenterDo) Joins(fields ...field.RelationField) IPolarisMonitorCenterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p polarisMonitorCenterDo) Preload(fields ...field.RelationField) IPolarisMonitorCenterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p polarisMonitorCenterDo) FirstOrInit() (*model.PolarisMonitorCenter, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisMonitorCenter), nil
	}
}

func (p polarisMonitorCenterDo) FirstOrCreate() (*model.PolarisMonitorCenter, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisMonitorCenter), nil
	}
}

func (p polarisMonitorCenterDo) FindByPage(offset int, limit int) (result []*model.PolarisMonitorCenter, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p polarisMonitorCenterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p polarisMonitorCenterDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p polarisMonitorCenterDo) Delete(models ...*model.PolarisMonitorCenter) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *polarisMonitorCenterDo) withDO(do gen.Dao) *polarisMonitorCenterDo {
	p.DO = *do.(*gen.DO)
	return p
}
