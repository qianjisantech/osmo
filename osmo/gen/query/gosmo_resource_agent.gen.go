// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"osmo/gen/model"
)

func newGosmoResourceAgent(db *gorm.DB, opts ...gen.DOOption) gosmoResourceAgent {
	_gosmoResourceAgent := gosmoResourceAgent{}

	_gosmoResourceAgent.gosmoResourceAgentDo.UseDB(db, opts...)
	_gosmoResourceAgent.gosmoResourceAgentDo.UseModel(&model.GosmoResourceAgent{})

	tableName := _gosmoResourceAgent.gosmoResourceAgentDo.TableName()
	_gosmoResourceAgent.ALL = field.NewAsterisk(tableName)
	_gosmoResourceAgent.ID = field.NewInt64(tableName, "id")
	_gosmoResourceAgent.Name = field.NewString(tableName, "name")
	_gosmoResourceAgent.Status = field.NewString(tableName, "status")
	_gosmoResourceAgent.IsDeleted = field.NewBool(tableName, "is_deleted")
	_gosmoResourceAgent.DeletedTime = field.NewTime(tableName, "deleted_time")
	_gosmoResourceAgent.DeletedBy = field.NewString(tableName, "deleted_by")
	_gosmoResourceAgent.DeletedByName = field.NewString(tableName, "deleted_by_name")
	_gosmoResourceAgent.CreateTime = field.NewTime(tableName, "create_time")
	_gosmoResourceAgent.CreateBy = field.NewString(tableName, "create_by")
	_gosmoResourceAgent.CreateByName = field.NewString(tableName, "create_by_name")
	_gosmoResourceAgent.UpdateTime = field.NewTime(tableName, "update_time")
	_gosmoResourceAgent.UpdateBy = field.NewString(tableName, "update_by")
	_gosmoResourceAgent.UpdateByName = field.NewString(tableName, "update_by_name")
	_gosmoResourceAgent.LastReportTime = field.NewTime(tableName, "last_report_time")
	_gosmoResourceAgent.IP = field.NewString(tableName, "ip")
	_gosmoResourceAgent.Description = field.NewString(tableName, "description")
	_gosmoResourceAgent.IdentificationCode = field.NewString(tableName, "identification_code")
	_gosmoResourceAgent.StartTime = field.NewTime(tableName, "start_time")
	_gosmoResourceAgent.StopTime = field.NewTime(tableName, "stop_time")
	_gosmoResourceAgent.CPUCores = field.NewInt32(tableName, "cpu_cores")
	_gosmoResourceAgent.CPUUsedPercent = field.NewFloat64(tableName, "cpu_used_percent")
	_gosmoResourceAgent.CPUFreePercent = field.NewFloat64(tableName, "cpu_free_percent")
	_gosmoResourceAgent.MemoryTotal = field.NewInt64(tableName, "memory_total")
	_gosmoResourceAgent.MemoryUsed = field.NewInt64(tableName, "memory_used")
	_gosmoResourceAgent.MemoryFree = field.NewInt64(tableName, "memory_free")
	_gosmoResourceAgent.MemoryUsedPercent = field.NewFloat64(tableName, "memory_used_percent")
	_gosmoResourceAgent.NetworkBytesSent = field.NewInt64(tableName, "network_bytes_sent")
	_gosmoResourceAgent.NetworkBytesReceive = field.NewInt64(tableName, "network_bytes_receive")
	_gosmoResourceAgent.NetworkPacketsSent = field.NewInt64(tableName, "network_packets_sent")
	_gosmoResourceAgent.NetworkPacketsReceive = field.NewInt64(tableName, "network_packets_receive")
	_gosmoResourceAgent.HostName = field.NewString(tableName, "host_name")
	_gosmoResourceAgent.ExecuteStatus = field.NewString(tableName, "execute_status")

	_gosmoResourceAgent.fillFieldMap()

	return _gosmoResourceAgent
}

type gosmoResourceAgent struct {
	gosmoResourceAgentDo gosmoResourceAgentDo

	ALL                   field.Asterisk
	ID                    field.Int64
	Name                  field.String
	Status                field.String // (offline:离线, busy:忙碌中, warning:警告, error:异常 registered:已注册 idle:空闲的)
	IsDeleted             field.Bool   // 逻辑删除标识（0为启用；1为禁用）
	DeletedTime           field.Time
	DeletedBy             field.String
	DeletedByName         field.String
	CreateTime            field.Time
	CreateBy              field.String
	CreateByName          field.String
	UpdateTime            field.Time
	UpdateBy              field.String
	UpdateByName          field.String
	LastReportTime        field.Time   // 上次汇报时间
	IP                    field.String // 地址
	Description           field.String // 描述
	IdentificationCode    field.String // 识别码
	StartTime             field.Time
	StopTime              field.Time
	CPUCores              field.Int32
	CPUUsedPercent        field.Float64
	CPUFreePercent        field.Float64
	MemoryTotal           field.Int64
	MemoryUsed            field.Int64
	MemoryFree            field.Int64
	MemoryUsedPercent     field.Float64
	NetworkBytesSent      field.Int64
	NetworkBytesReceive   field.Int64
	NetworkPacketsSent    field.Int64
	NetworkPacketsReceive field.Int64
	HostName              field.String
	ExecuteStatus         field.String

	fieldMap map[string]field.Expr
}

func (g gosmoResourceAgent) Table(newTableName string) *gosmoResourceAgent {
	g.gosmoResourceAgentDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gosmoResourceAgent) As(alias string) *gosmoResourceAgent {
	g.gosmoResourceAgentDo.DO = *(g.gosmoResourceAgentDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gosmoResourceAgent) updateTableName(table string) *gosmoResourceAgent {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewString(table, "status")
	g.IsDeleted = field.NewBool(table, "is_deleted")
	g.DeletedTime = field.NewTime(table, "deleted_time")
	g.DeletedBy = field.NewString(table, "deleted_by")
	g.DeletedByName = field.NewString(table, "deleted_by_name")
	g.CreateTime = field.NewTime(table, "create_time")
	g.CreateBy = field.NewString(table, "create_by")
	g.CreateByName = field.NewString(table, "create_by_name")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.UpdateBy = field.NewString(table, "update_by")
	g.UpdateByName = field.NewString(table, "update_by_name")
	g.LastReportTime = field.NewTime(table, "last_report_time")
	g.IP = field.NewString(table, "ip")
	g.Description = field.NewString(table, "description")
	g.IdentificationCode = field.NewString(table, "identification_code")
	g.StartTime = field.NewTime(table, "start_time")
	g.StopTime = field.NewTime(table, "stop_time")
	g.CPUCores = field.NewInt32(table, "cpu_cores")
	g.CPUUsedPercent = field.NewFloat64(table, "cpu_used_percent")
	g.CPUFreePercent = field.NewFloat64(table, "cpu_free_percent")
	g.MemoryTotal = field.NewInt64(table, "memory_total")
	g.MemoryUsed = field.NewInt64(table, "memory_used")
	g.MemoryFree = field.NewInt64(table, "memory_free")
	g.MemoryUsedPercent = field.NewFloat64(table, "memory_used_percent")
	g.NetworkBytesSent = field.NewInt64(table, "network_bytes_sent")
	g.NetworkBytesReceive = field.NewInt64(table, "network_bytes_receive")
	g.NetworkPacketsSent = field.NewInt64(table, "network_packets_sent")
	g.NetworkPacketsReceive = field.NewInt64(table, "network_packets_receive")
	g.HostName = field.NewString(table, "host_name")
	g.ExecuteStatus = field.NewString(table, "execute_status")

	g.fillFieldMap()

	return g
}

func (g *gosmoResourceAgent) WithContext(ctx context.Context) IGosmoResourceAgentDo {
	return g.gosmoResourceAgentDo.WithContext(ctx)
}

func (g gosmoResourceAgent) TableName() string { return g.gosmoResourceAgentDo.TableName() }

func (g gosmoResourceAgent) Alias() string { return g.gosmoResourceAgentDo.Alias() }

func (g gosmoResourceAgent) Columns(cols ...field.Expr) gen.Columns {
	return g.gosmoResourceAgentDo.Columns(cols...)
}

func (g *gosmoResourceAgent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gosmoResourceAgent) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 32)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["deleted_time"] = g.DeletedTime
	g.fieldMap["deleted_by"] = g.DeletedBy
	g.fieldMap["deleted_by_name"] = g.DeletedByName
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["create_by_name"] = g.CreateByName
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["update_by"] = g.UpdateBy
	g.fieldMap["update_by_name"] = g.UpdateByName
	g.fieldMap["last_report_time"] = g.LastReportTime
	g.fieldMap["ip"] = g.IP
	g.fieldMap["description"] = g.Description
	g.fieldMap["identification_code"] = g.IdentificationCode
	g.fieldMap["start_time"] = g.StartTime
	g.fieldMap["stop_time"] = g.StopTime
	g.fieldMap["cpu_cores"] = g.CPUCores
	g.fieldMap["cpu_used_percent"] = g.CPUUsedPercent
	g.fieldMap["cpu_free_percent"] = g.CPUFreePercent
	g.fieldMap["memory_total"] = g.MemoryTotal
	g.fieldMap["memory_used"] = g.MemoryUsed
	g.fieldMap["memory_free"] = g.MemoryFree
	g.fieldMap["memory_used_percent"] = g.MemoryUsedPercent
	g.fieldMap["network_bytes_sent"] = g.NetworkBytesSent
	g.fieldMap["network_bytes_receive"] = g.NetworkBytesReceive
	g.fieldMap["network_packets_sent"] = g.NetworkPacketsSent
	g.fieldMap["network_packets_receive"] = g.NetworkPacketsReceive
	g.fieldMap["host_name"] = g.HostName
	g.fieldMap["execute_status"] = g.ExecuteStatus
}

func (g gosmoResourceAgent) clone(db *gorm.DB) gosmoResourceAgent {
	g.gosmoResourceAgentDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gosmoResourceAgent) replaceDB(db *gorm.DB) gosmoResourceAgent {
	g.gosmoResourceAgentDo.ReplaceDB(db)
	return g
}

type gosmoResourceAgentDo struct{ gen.DO }

type IGosmoResourceAgentDo interface {
	gen.SubQuery
	Debug() IGosmoResourceAgentDo
	WithContext(ctx context.Context) IGosmoResourceAgentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGosmoResourceAgentDo
	WriteDB() IGosmoResourceAgentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGosmoResourceAgentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGosmoResourceAgentDo
	Not(conds ...gen.Condition) IGosmoResourceAgentDo
	Or(conds ...gen.Condition) IGosmoResourceAgentDo
	Select(conds ...field.Expr) IGosmoResourceAgentDo
	Where(conds ...gen.Condition) IGosmoResourceAgentDo
	Order(conds ...field.Expr) IGosmoResourceAgentDo
	Distinct(cols ...field.Expr) IGosmoResourceAgentDo
	Omit(cols ...field.Expr) IGosmoResourceAgentDo
	Join(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo
	Group(cols ...field.Expr) IGosmoResourceAgentDo
	Having(conds ...gen.Condition) IGosmoResourceAgentDo
	Limit(limit int) IGosmoResourceAgentDo
	Offset(offset int) IGosmoResourceAgentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoResourceAgentDo
	Unscoped() IGosmoResourceAgentDo
	Create(values ...*model.GosmoResourceAgent) error
	CreateInBatches(values []*model.GosmoResourceAgent, batchSize int) error
	Save(values ...*model.GosmoResourceAgent) error
	First() (*model.GosmoResourceAgent, error)
	Take() (*model.GosmoResourceAgent, error)
	Last() (*model.GosmoResourceAgent, error)
	Find() ([]*model.GosmoResourceAgent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoResourceAgent, err error)
	FindInBatches(result *[]*model.GosmoResourceAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GosmoResourceAgent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGosmoResourceAgentDo
	Assign(attrs ...field.AssignExpr) IGosmoResourceAgentDo
	Joins(fields ...field.RelationField) IGosmoResourceAgentDo
	Preload(fields ...field.RelationField) IGosmoResourceAgentDo
	FirstOrInit() (*model.GosmoResourceAgent, error)
	FirstOrCreate() (*model.GosmoResourceAgent, error)
	FindByPage(offset int, limit int) (result []*model.GosmoResourceAgent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGosmoResourceAgentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gosmoResourceAgentDo) Debug() IGosmoResourceAgentDo {
	return g.withDO(g.DO.Debug())
}

func (g gosmoResourceAgentDo) WithContext(ctx context.Context) IGosmoResourceAgentDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gosmoResourceAgentDo) ReadDB() IGosmoResourceAgentDo {
	return g.Clauses(dbresolver.Read)
}

func (g gosmoResourceAgentDo) WriteDB() IGosmoResourceAgentDo {
	return g.Clauses(dbresolver.Write)
}

func (g gosmoResourceAgentDo) Session(config *gorm.Session) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Session(config))
}

func (g gosmoResourceAgentDo) Clauses(conds ...clause.Expression) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gosmoResourceAgentDo) Returning(value interface{}, columns ...string) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gosmoResourceAgentDo) Not(conds ...gen.Condition) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gosmoResourceAgentDo) Or(conds ...gen.Condition) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gosmoResourceAgentDo) Select(conds ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gosmoResourceAgentDo) Where(conds ...gen.Condition) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gosmoResourceAgentDo) Order(conds ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gosmoResourceAgentDo) Distinct(cols ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gosmoResourceAgentDo) Omit(cols ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gosmoResourceAgentDo) Join(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gosmoResourceAgentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gosmoResourceAgentDo) RightJoin(table schema.Tabler, on ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gosmoResourceAgentDo) Group(cols ...field.Expr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gosmoResourceAgentDo) Having(conds ...gen.Condition) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gosmoResourceAgentDo) Limit(limit int) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gosmoResourceAgentDo) Offset(offset int) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gosmoResourceAgentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gosmoResourceAgentDo) Unscoped() IGosmoResourceAgentDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gosmoResourceAgentDo) Create(values ...*model.GosmoResourceAgent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gosmoResourceAgentDo) CreateInBatches(values []*model.GosmoResourceAgent, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gosmoResourceAgentDo) Save(values ...*model.GosmoResourceAgent) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gosmoResourceAgentDo) First() (*model.GosmoResourceAgent, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoResourceAgent), nil
	}
}

func (g gosmoResourceAgentDo) Take() (*model.GosmoResourceAgent, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoResourceAgent), nil
	}
}

func (g gosmoResourceAgentDo) Last() (*model.GosmoResourceAgent, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoResourceAgent), nil
	}
}

func (g gosmoResourceAgentDo) Find() ([]*model.GosmoResourceAgent, error) {
	result, err := g.DO.Find()
	return result.([]*model.GosmoResourceAgent), err
}

func (g gosmoResourceAgentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoResourceAgent, err error) {
	buf := make([]*model.GosmoResourceAgent, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gosmoResourceAgentDo) FindInBatches(result *[]*model.GosmoResourceAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gosmoResourceAgentDo) Attrs(attrs ...field.AssignExpr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gosmoResourceAgentDo) Assign(attrs ...field.AssignExpr) IGosmoResourceAgentDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gosmoResourceAgentDo) Joins(fields ...field.RelationField) IGosmoResourceAgentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gosmoResourceAgentDo) Preload(fields ...field.RelationField) IGosmoResourceAgentDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gosmoResourceAgentDo) FirstOrInit() (*model.GosmoResourceAgent, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoResourceAgent), nil
	}
}

func (g gosmoResourceAgentDo) FirstOrCreate() (*model.GosmoResourceAgent, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoResourceAgent), nil
	}
}

func (g gosmoResourceAgentDo) FindByPage(offset int, limit int) (result []*model.GosmoResourceAgent, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gosmoResourceAgentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gosmoResourceAgentDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gosmoResourceAgentDo) Delete(models ...*model.GosmoResourceAgent) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gosmoResourceAgentDo) withDO(do gen.Dao) *gosmoResourceAgentDo {
	g.DO = *do.(*gen.DO)
	return g
}
