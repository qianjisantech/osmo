// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "osmo/internal/handler/auth"
	gosmoresource "osmo/internal/handler/gosmo/resource"
	gosmotask "osmo/internal/handler/gosmo/task"
	gosmotraffic "osmo/internal/handler/gosmo/traffic"
	system "osmo/internal/handler/system"
	"osmo/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/codes",
				Handler: auth.AuthCodesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.AuthLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/logout",
				Handler: auth.AuthLogoutHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/console/:id",
				Handler: gosmoresource.ResourceAgentConsoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: gosmoresource.ResourceAgentCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: gosmoresource.ResourceAgentDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/v2/:id",
				Handler: gosmoresource.ResourceAgentDetailV2Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/page",
				Handler: gosmoresource.ResourceAgentQueryPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/select/options",
				Handler: gosmoresource.ResourceAgentSelectOptionsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: gosmoresource.ResourceAgentUpdateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gosmo/resource/agent"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: gosmotask.TaskRecordCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: gosmotask.TaskRecordDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/page",
				Handler: gosmotask.TaskRecordQueryPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: gosmotask.TaskRecordUpdateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gosmo/task/record"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: gosmotraffic.TrafficPoolDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/page",
				Handler: gosmotraffic.TrafficPoolQueryPageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/gosmo/traffic/pool"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/info",
				Handler: system.UserInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/system"),
	)
}
