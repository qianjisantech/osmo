// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qianjisantech/gosmo-agent/gen/model"
)

func newGosmoAgentOpsLog(db *gorm.DB, opts ...gen.DOOption) gosmoAgentOpsLog {
	_gosmoAgentOpsLog := gosmoAgentOpsLog{}

	_gosmoAgentOpsLog.gosmoAgentOpsLogDo.UseDB(db, opts...)
	_gosmoAgentOpsLog.gosmoAgentOpsLogDo.UseModel(&model.GosmoAgentOpsLog{})

	tableName := _gosmoAgentOpsLog.gosmoAgentOpsLogDo.TableName()
	_gosmoAgentOpsLog.ALL = field.NewAsterisk(tableName)
	_gosmoAgentOpsLog.ID = field.NewInt32(tableName, "id")
	_gosmoAgentOpsLog.OpsType = field.NewString(tableName, "ops_type")
	_gosmoAgentOpsLog.Level = field.NewString(tableName, "level")
	_gosmoAgentOpsLog.Content = field.NewString(tableName, "content")
	_gosmoAgentOpsLog.Timestamp = field.NewString(tableName, "timestamp")

	_gosmoAgentOpsLog.fillFieldMap()

	return _gosmoAgentOpsLog
}

type gosmoAgentOpsLog struct {
	gosmoAgentOpsLogDo gosmoAgentOpsLogDo

	ALL       field.Asterisk
	ID        field.Int32
	OpsType   field.String
	Level     field.String
	Content   field.String
	Timestamp field.String

	fieldMap map[string]field.Expr
}

func (g gosmoAgentOpsLog) Table(newTableName string) *gosmoAgentOpsLog {
	g.gosmoAgentOpsLogDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gosmoAgentOpsLog) As(alias string) *gosmoAgentOpsLog {
	g.gosmoAgentOpsLogDo.DO = *(g.gosmoAgentOpsLogDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gosmoAgentOpsLog) updateTableName(table string) *gosmoAgentOpsLog {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.OpsType = field.NewString(table, "ops_type")
	g.Level = field.NewString(table, "level")
	g.Content = field.NewString(table, "content")
	g.Timestamp = field.NewString(table, "timestamp")

	g.fillFieldMap()

	return g
}

func (g *gosmoAgentOpsLog) WithContext(ctx context.Context) IGosmoAgentOpsLogDo {
	return g.gosmoAgentOpsLogDo.WithContext(ctx)
}

func (g gosmoAgentOpsLog) TableName() string { return g.gosmoAgentOpsLogDo.TableName() }

func (g gosmoAgentOpsLog) Alias() string { return g.gosmoAgentOpsLogDo.Alias() }

func (g gosmoAgentOpsLog) Columns(cols ...field.Expr) gen.Columns {
	return g.gosmoAgentOpsLogDo.Columns(cols...)
}

func (g *gosmoAgentOpsLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gosmoAgentOpsLog) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["ops_type"] = g.OpsType
	g.fieldMap["level"] = g.Level
	g.fieldMap["content"] = g.Content
	g.fieldMap["timestamp"] = g.Timestamp
}

func (g gosmoAgentOpsLog) clone(db *gorm.DB) gosmoAgentOpsLog {
	g.gosmoAgentOpsLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gosmoAgentOpsLog) replaceDB(db *gorm.DB) gosmoAgentOpsLog {
	g.gosmoAgentOpsLogDo.ReplaceDB(db)
	return g
}

type gosmoAgentOpsLogDo struct{ gen.DO }

type IGosmoAgentOpsLogDo interface {
	gen.SubQuery
	Debug() IGosmoAgentOpsLogDo
	WithContext(ctx context.Context) IGosmoAgentOpsLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGosmoAgentOpsLogDo
	WriteDB() IGosmoAgentOpsLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGosmoAgentOpsLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGosmoAgentOpsLogDo
	Not(conds ...gen.Condition) IGosmoAgentOpsLogDo
	Or(conds ...gen.Condition) IGosmoAgentOpsLogDo
	Select(conds ...field.Expr) IGosmoAgentOpsLogDo
	Where(conds ...gen.Condition) IGosmoAgentOpsLogDo
	Order(conds ...field.Expr) IGosmoAgentOpsLogDo
	Distinct(cols ...field.Expr) IGosmoAgentOpsLogDo
	Omit(cols ...field.Expr) IGosmoAgentOpsLogDo
	Join(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo
	Group(cols ...field.Expr) IGosmoAgentOpsLogDo
	Having(conds ...gen.Condition) IGosmoAgentOpsLogDo
	Limit(limit int) IGosmoAgentOpsLogDo
	Offset(offset int) IGosmoAgentOpsLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentOpsLogDo
	Unscoped() IGosmoAgentOpsLogDo
	Create(values ...*model.GosmoAgentOpsLog) error
	CreateInBatches(values []*model.GosmoAgentOpsLog, batchSize int) error
	Save(values ...*model.GosmoAgentOpsLog) error
	First() (*model.GosmoAgentOpsLog, error)
	Take() (*model.GosmoAgentOpsLog, error)
	Last() (*model.GosmoAgentOpsLog, error)
	Find() ([]*model.GosmoAgentOpsLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentOpsLog, err error)
	FindInBatches(result *[]*model.GosmoAgentOpsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GosmoAgentOpsLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGosmoAgentOpsLogDo
	Assign(attrs ...field.AssignExpr) IGosmoAgentOpsLogDo
	Joins(fields ...field.RelationField) IGosmoAgentOpsLogDo
	Preload(fields ...field.RelationField) IGosmoAgentOpsLogDo
	FirstOrInit() (*model.GosmoAgentOpsLog, error)
	FirstOrCreate() (*model.GosmoAgentOpsLog, error)
	FindByPage(offset int, limit int) (result []*model.GosmoAgentOpsLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGosmoAgentOpsLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gosmoAgentOpsLogDo) Debug() IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Debug())
}

func (g gosmoAgentOpsLogDo) WithContext(ctx context.Context) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gosmoAgentOpsLogDo) ReadDB() IGosmoAgentOpsLogDo {
	return g.Clauses(dbresolver.Read)
}

func (g gosmoAgentOpsLogDo) WriteDB() IGosmoAgentOpsLogDo {
	return g.Clauses(dbresolver.Write)
}

func (g gosmoAgentOpsLogDo) Session(config *gorm.Session) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Session(config))
}

func (g gosmoAgentOpsLogDo) Clauses(conds ...clause.Expression) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gosmoAgentOpsLogDo) Returning(value interface{}, columns ...string) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gosmoAgentOpsLogDo) Not(conds ...gen.Condition) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gosmoAgentOpsLogDo) Or(conds ...gen.Condition) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gosmoAgentOpsLogDo) Select(conds ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gosmoAgentOpsLogDo) Where(conds ...gen.Condition) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gosmoAgentOpsLogDo) Order(conds ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gosmoAgentOpsLogDo) Distinct(cols ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gosmoAgentOpsLogDo) Omit(cols ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gosmoAgentOpsLogDo) Join(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gosmoAgentOpsLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gosmoAgentOpsLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gosmoAgentOpsLogDo) Group(cols ...field.Expr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gosmoAgentOpsLogDo) Having(conds ...gen.Condition) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gosmoAgentOpsLogDo) Limit(limit int) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gosmoAgentOpsLogDo) Offset(offset int) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gosmoAgentOpsLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gosmoAgentOpsLogDo) Unscoped() IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gosmoAgentOpsLogDo) Create(values ...*model.GosmoAgentOpsLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gosmoAgentOpsLogDo) CreateInBatches(values []*model.GosmoAgentOpsLog, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gosmoAgentOpsLogDo) Save(values ...*model.GosmoAgentOpsLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gosmoAgentOpsLogDo) First() (*model.GosmoAgentOpsLog, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentOpsLog), nil
	}
}

func (g gosmoAgentOpsLogDo) Take() (*model.GosmoAgentOpsLog, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentOpsLog), nil
	}
}

func (g gosmoAgentOpsLogDo) Last() (*model.GosmoAgentOpsLog, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentOpsLog), nil
	}
}

func (g gosmoAgentOpsLogDo) Find() ([]*model.GosmoAgentOpsLog, error) {
	result, err := g.DO.Find()
	return result.([]*model.GosmoAgentOpsLog), err
}

func (g gosmoAgentOpsLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentOpsLog, err error) {
	buf := make([]*model.GosmoAgentOpsLog, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gosmoAgentOpsLogDo) FindInBatches(result *[]*model.GosmoAgentOpsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gosmoAgentOpsLogDo) Attrs(attrs ...field.AssignExpr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gosmoAgentOpsLogDo) Assign(attrs ...field.AssignExpr) IGosmoAgentOpsLogDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gosmoAgentOpsLogDo) Joins(fields ...field.RelationField) IGosmoAgentOpsLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gosmoAgentOpsLogDo) Preload(fields ...field.RelationField) IGosmoAgentOpsLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gosmoAgentOpsLogDo) FirstOrInit() (*model.GosmoAgentOpsLog, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentOpsLog), nil
	}
}

func (g gosmoAgentOpsLogDo) FirstOrCreate() (*model.GosmoAgentOpsLog, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentOpsLog), nil
	}
}

func (g gosmoAgentOpsLogDo) FindByPage(offset int, limit int) (result []*model.GosmoAgentOpsLog, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gosmoAgentOpsLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gosmoAgentOpsLogDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gosmoAgentOpsLogDo) Delete(models ...*model.GosmoAgentOpsLog) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gosmoAgentOpsLogDo) withDO(do gen.Dao) *gosmoAgentOpsLogDo {
	g.DO = *do.(*gen.DO)
	return g
}
