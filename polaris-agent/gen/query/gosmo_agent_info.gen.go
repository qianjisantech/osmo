// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qianjisantech/gosmo-agent/gen/model"
)

func newGosmoAgentInfo(db *gorm.DB, opts ...gen.DOOption) gosmoAgentInfo {
	_gosmoAgentInfo := gosmoAgentInfo{}

	_gosmoAgentInfo.gosmoAgentInfoDo.UseDB(db, opts...)
	_gosmoAgentInfo.gosmoAgentInfoDo.UseModel(&model.GosmoAgentInfo{})

	tableName := _gosmoAgentInfo.gosmoAgentInfoDo.TableName()
	_gosmoAgentInfo.ALL = field.NewAsterisk(tableName)
	_gosmoAgentInfo.ID = field.NewInt32(tableName, "id")
	_gosmoAgentInfo.Name = field.NewString(tableName, "name")
	_gosmoAgentInfo.Status = field.NewString(tableName, "status")
	_gosmoAgentInfo.StartTime = field.NewString(tableName, "start_time")
	_gosmoAgentInfo.StopTime = field.NewString(tableName, "stop_time")
	_gosmoAgentInfo.RemoteAgentID = field.NewString(tableName, "remote_agent_id")
	_gosmoAgentInfo.CPUCores = field.NewInt32(tableName, "cpu_cores")
	_gosmoAgentInfo.CPUUsedPercent = field.NewFloat64(tableName, "cpu_used_percent")
	_gosmoAgentInfo.CPUFreePercent = field.NewFloat64(tableName, "cpu_free_percent")
	_gosmoAgentInfo.MemoryTotal = field.NewFloat64(tableName, "memory_total")
	_gosmoAgentInfo.MemoryUsed = field.NewFloat64(tableName, "memory_used")
	_gosmoAgentInfo.MemoryFree = field.NewFloat64(tableName, "memory_free")
	_gosmoAgentInfo.MemoryUsedPercent = field.NewFloat64(tableName, "memory_used_percent")
	_gosmoAgentInfo.NetworkBytesSent = field.NewFloat64(tableName, "network_bytes_sent")
	_gosmoAgentInfo.NetworkBytesReceive = field.NewFloat64(tableName, "network_bytes_receive")
	_gosmoAgentInfo.NetworkPacketsSent = field.NewInt32(tableName, "network_packets_sent")
	_gosmoAgentInfo.NetworkPacketsReceive = field.NewInt32(tableName, "network_packets_receive")
	_gosmoAgentInfo.DisksJSON = field.NewString(tableName, "disks_json")
	_gosmoAgentInfo.IP = field.NewString(tableName, "ip")
	_gosmoAgentInfo.RecordTime = field.NewString(tableName, "record_time")

	_gosmoAgentInfo.fillFieldMap()

	return _gosmoAgentInfo
}

type gosmoAgentInfo struct {
	gosmoAgentInfoDo gosmoAgentInfoDo

	ALL                   field.Asterisk
	ID                    field.Int32
	Name                  field.String
	Status                field.String
	StartTime             field.String
	StopTime              field.String
	RemoteAgentID         field.String
	CPUCores              field.Int32
	CPUUsedPercent        field.Float64
	CPUFreePercent        field.Float64
	MemoryTotal           field.Float64
	MemoryUsed            field.Float64
	MemoryFree            field.Float64
	MemoryUsedPercent     field.Float64
	NetworkBytesSent      field.Float64
	NetworkBytesReceive   field.Float64
	NetworkPacketsSent    field.Int32
	NetworkPacketsReceive field.Int32
	DisksJSON             field.String
	IP                    field.String
	RecordTime            field.String

	fieldMap map[string]field.Expr
}

func (g gosmoAgentInfo) Table(newTableName string) *gosmoAgentInfo {
	g.gosmoAgentInfoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gosmoAgentInfo) As(alias string) *gosmoAgentInfo {
	g.gosmoAgentInfoDo.DO = *(g.gosmoAgentInfoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gosmoAgentInfo) updateTableName(table string) *gosmoAgentInfo {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewString(table, "status")
	g.StartTime = field.NewString(table, "start_time")
	g.StopTime = field.NewString(table, "stop_time")
	g.RemoteAgentID = field.NewString(table, "remote_agent_id")
	g.CPUCores = field.NewInt32(table, "cpu_cores")
	g.CPUUsedPercent = field.NewFloat64(table, "cpu_used_percent")
	g.CPUFreePercent = field.NewFloat64(table, "cpu_free_percent")
	g.MemoryTotal = field.NewFloat64(table, "memory_total")
	g.MemoryUsed = field.NewFloat64(table, "memory_used")
	g.MemoryFree = field.NewFloat64(table, "memory_free")
	g.MemoryUsedPercent = field.NewFloat64(table, "memory_used_percent")
	g.NetworkBytesSent = field.NewFloat64(table, "network_bytes_sent")
	g.NetworkBytesReceive = field.NewFloat64(table, "network_bytes_receive")
	g.NetworkPacketsSent = field.NewInt32(table, "network_packets_sent")
	g.NetworkPacketsReceive = field.NewInt32(table, "network_packets_receive")
	g.DisksJSON = field.NewString(table, "disks_json")
	g.IP = field.NewString(table, "ip")
	g.RecordTime = field.NewString(table, "record_time")

	g.fillFieldMap()

	return g
}

func (g *gosmoAgentInfo) WithContext(ctx context.Context) IGosmoAgentInfoDo {
	return g.gosmoAgentInfoDo.WithContext(ctx)
}

func (g gosmoAgentInfo) TableName() string { return g.gosmoAgentInfoDo.TableName() }

func (g gosmoAgentInfo) Alias() string { return g.gosmoAgentInfoDo.Alias() }

func (g gosmoAgentInfo) Columns(cols ...field.Expr) gen.Columns {
	return g.gosmoAgentInfoDo.Columns(cols...)
}

func (g *gosmoAgentInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gosmoAgentInfo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 20)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["start_time"] = g.StartTime
	g.fieldMap["stop_time"] = g.StopTime
	g.fieldMap["remote_agent_id"] = g.RemoteAgentID
	g.fieldMap["cpu_cores"] = g.CPUCores
	g.fieldMap["cpu_used_percent"] = g.CPUUsedPercent
	g.fieldMap["cpu_free_percent"] = g.CPUFreePercent
	g.fieldMap["memory_total"] = g.MemoryTotal
	g.fieldMap["memory_used"] = g.MemoryUsed
	g.fieldMap["memory_free"] = g.MemoryFree
	g.fieldMap["memory_used_percent"] = g.MemoryUsedPercent
	g.fieldMap["network_bytes_sent"] = g.NetworkBytesSent
	g.fieldMap["network_bytes_receive"] = g.NetworkBytesReceive
	g.fieldMap["network_packets_sent"] = g.NetworkPacketsSent
	g.fieldMap["network_packets_receive"] = g.NetworkPacketsReceive
	g.fieldMap["disks_json"] = g.DisksJSON
	g.fieldMap["ip"] = g.IP
	g.fieldMap["record_time"] = g.RecordTime
}

func (g gosmoAgentInfo) clone(db *gorm.DB) gosmoAgentInfo {
	g.gosmoAgentInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gosmoAgentInfo) replaceDB(db *gorm.DB) gosmoAgentInfo {
	g.gosmoAgentInfoDo.ReplaceDB(db)
	return g
}

type gosmoAgentInfoDo struct{ gen.DO }

type IGosmoAgentInfoDo interface {
	gen.SubQuery
	Debug() IGosmoAgentInfoDo
	WithContext(ctx context.Context) IGosmoAgentInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGosmoAgentInfoDo
	WriteDB() IGosmoAgentInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGosmoAgentInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGosmoAgentInfoDo
	Not(conds ...gen.Condition) IGosmoAgentInfoDo
	Or(conds ...gen.Condition) IGosmoAgentInfoDo
	Select(conds ...field.Expr) IGosmoAgentInfoDo
	Where(conds ...gen.Condition) IGosmoAgentInfoDo
	Order(conds ...field.Expr) IGosmoAgentInfoDo
	Distinct(cols ...field.Expr) IGosmoAgentInfoDo
	Omit(cols ...field.Expr) IGosmoAgentInfoDo
	Join(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo
	Group(cols ...field.Expr) IGosmoAgentInfoDo
	Having(conds ...gen.Condition) IGosmoAgentInfoDo
	Limit(limit int) IGosmoAgentInfoDo
	Offset(offset int) IGosmoAgentInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentInfoDo
	Unscoped() IGosmoAgentInfoDo
	Create(values ...*model.GosmoAgentInfo) error
	CreateInBatches(values []*model.GosmoAgentInfo, batchSize int) error
	Save(values ...*model.GosmoAgentInfo) error
	First() (*model.GosmoAgentInfo, error)
	Take() (*model.GosmoAgentInfo, error)
	Last() (*model.GosmoAgentInfo, error)
	Find() ([]*model.GosmoAgentInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentInfo, err error)
	FindInBatches(result *[]*model.GosmoAgentInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GosmoAgentInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGosmoAgentInfoDo
	Assign(attrs ...field.AssignExpr) IGosmoAgentInfoDo
	Joins(fields ...field.RelationField) IGosmoAgentInfoDo
	Preload(fields ...field.RelationField) IGosmoAgentInfoDo
	FirstOrInit() (*model.GosmoAgentInfo, error)
	FirstOrCreate() (*model.GosmoAgentInfo, error)
	FindByPage(offset int, limit int) (result []*model.GosmoAgentInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGosmoAgentInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gosmoAgentInfoDo) Debug() IGosmoAgentInfoDo {
	return g.withDO(g.DO.Debug())
}

func (g gosmoAgentInfoDo) WithContext(ctx context.Context) IGosmoAgentInfoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gosmoAgentInfoDo) ReadDB() IGosmoAgentInfoDo {
	return g.Clauses(dbresolver.Read)
}

func (g gosmoAgentInfoDo) WriteDB() IGosmoAgentInfoDo {
	return g.Clauses(dbresolver.Write)
}

func (g gosmoAgentInfoDo) Session(config *gorm.Session) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Session(config))
}

func (g gosmoAgentInfoDo) Clauses(conds ...clause.Expression) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gosmoAgentInfoDo) Returning(value interface{}, columns ...string) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gosmoAgentInfoDo) Not(conds ...gen.Condition) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gosmoAgentInfoDo) Or(conds ...gen.Condition) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gosmoAgentInfoDo) Select(conds ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gosmoAgentInfoDo) Where(conds ...gen.Condition) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gosmoAgentInfoDo) Order(conds ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gosmoAgentInfoDo) Distinct(cols ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gosmoAgentInfoDo) Omit(cols ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gosmoAgentInfoDo) Join(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gosmoAgentInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gosmoAgentInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gosmoAgentInfoDo) Group(cols ...field.Expr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gosmoAgentInfoDo) Having(conds ...gen.Condition) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gosmoAgentInfoDo) Limit(limit int) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gosmoAgentInfoDo) Offset(offset int) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gosmoAgentInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gosmoAgentInfoDo) Unscoped() IGosmoAgentInfoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gosmoAgentInfoDo) Create(values ...*model.GosmoAgentInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gosmoAgentInfoDo) CreateInBatches(values []*model.GosmoAgentInfo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gosmoAgentInfoDo) Save(values ...*model.GosmoAgentInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gosmoAgentInfoDo) First() (*model.GosmoAgentInfo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentInfo), nil
	}
}

func (g gosmoAgentInfoDo) Take() (*model.GosmoAgentInfo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentInfo), nil
	}
}

func (g gosmoAgentInfoDo) Last() (*model.GosmoAgentInfo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentInfo), nil
	}
}

func (g gosmoAgentInfoDo) Find() ([]*model.GosmoAgentInfo, error) {
	result, err := g.DO.Find()
	return result.([]*model.GosmoAgentInfo), err
}

func (g gosmoAgentInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentInfo, err error) {
	buf := make([]*model.GosmoAgentInfo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gosmoAgentInfoDo) FindInBatches(result *[]*model.GosmoAgentInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gosmoAgentInfoDo) Attrs(attrs ...field.AssignExpr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gosmoAgentInfoDo) Assign(attrs ...field.AssignExpr) IGosmoAgentInfoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gosmoAgentInfoDo) Joins(fields ...field.RelationField) IGosmoAgentInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gosmoAgentInfoDo) Preload(fields ...field.RelationField) IGosmoAgentInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gosmoAgentInfoDo) FirstOrInit() (*model.GosmoAgentInfo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentInfo), nil
	}
}

func (g gosmoAgentInfoDo) FirstOrCreate() (*model.GosmoAgentInfo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentInfo), nil
	}
}

func (g gosmoAgentInfoDo) FindByPage(offset int, limit int) (result []*model.GosmoAgentInfo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gosmoAgentInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gosmoAgentInfoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gosmoAgentInfoDo) Delete(models ...*model.GosmoAgentInfo) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gosmoAgentInfoDo) withDO(do gen.Dao) *gosmoAgentInfoDo {
	g.DO = *do.(*gen.DO)
	return g
}
