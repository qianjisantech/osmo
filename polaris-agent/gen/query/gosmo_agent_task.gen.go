// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qianjisantech/polaris-agent/gen/model"
)

func newGosmoAgentTask(db *gorm.DB, opts ...gen.DOOption) gosmoAgentTask {
	_gosmoAgentTask := gosmoAgentTask{}

	_gosmoAgentTask.gosmoAgentTaskDo.UseDB(db, opts...)
	_gosmoAgentTask.gosmoAgentTaskDo.UseModel(&model.GosmoAgentTask{})

	tableName := _gosmoAgentTask.gosmoAgentTaskDo.TableName()
	_gosmoAgentTask.ALL = field.NewAsterisk(tableName)
	_gosmoAgentTask.ID = field.NewInt32(tableName, "id")
	_gosmoAgentTask.Name = field.NewString(tableName, "name")
	_gosmoAgentTask.Status = field.NewString(tableName, "status")
	_gosmoAgentTask.StartTime = field.NewString(tableName, "start_time")
	_gosmoAgentTask.StopTime = field.NewString(tableName, "stop_time")
	_gosmoAgentTask.CreateTime = field.NewString(tableName, "create_time")
	_gosmoAgentTask.CreateBy = field.NewString(tableName, "create_by")
	_gosmoAgentTask.CreateByName = field.NewString(tableName, "create_by_name")
	_gosmoAgentTask.UpdateTime = field.NewString(tableName, "update_time")
	_gosmoAgentTask.UpdateBy = field.NewString(tableName, "update_by")
	_gosmoAgentTask.UpdateByName = field.NewString(tableName, "update_by_name")
	_gosmoAgentTask.RemoteTaskID = field.NewString(tableName, "remote_task_id")
	_gosmoAgentTask.Type = field.NewString(tableName, "type")

	_gosmoAgentTask.fillFieldMap()

	return _gosmoAgentTask
}

type gosmoAgentTask struct {
	gosmoAgentTaskDo gosmoAgentTaskDo

	ALL          field.Asterisk
	ID           field.Int32
	Name         field.String
	Status       field.String
	StartTime    field.String
	StopTime     field.String
	CreateTime   field.String
	CreateBy     field.String
	CreateByName field.String
	UpdateTime   field.String
	UpdateBy     field.String
	UpdateByName field.String
	RemoteTaskID field.String
	Type         field.String

	fieldMap map[string]field.Expr
}

func (g gosmoAgentTask) Table(newTableName string) *gosmoAgentTask {
	g.gosmoAgentTaskDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gosmoAgentTask) As(alias string) *gosmoAgentTask {
	g.gosmoAgentTaskDo.DO = *(g.gosmoAgentTaskDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gosmoAgentTask) updateTableName(table string) *gosmoAgentTask {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewString(table, "status")
	g.StartTime = field.NewString(table, "start_time")
	g.StopTime = field.NewString(table, "stop_time")
	g.CreateTime = field.NewString(table, "create_time")
	g.CreateBy = field.NewString(table, "create_by")
	g.CreateByName = field.NewString(table, "create_by_name")
	g.UpdateTime = field.NewString(table, "update_time")
	g.UpdateBy = field.NewString(table, "update_by")
	g.UpdateByName = field.NewString(table, "update_by_name")
	g.RemoteTaskID = field.NewString(table, "remote_task_id")
	g.Type = field.NewString(table, "type")

	g.fillFieldMap()

	return g
}

func (g *gosmoAgentTask) WithContext(ctx context.Context) IGosmoAgentTaskDo {
	return g.gosmoAgentTaskDo.WithContext(ctx)
}

func (g gosmoAgentTask) TableName() string { return g.gosmoAgentTaskDo.TableName() }

func (g gosmoAgentTask) Alias() string { return g.gosmoAgentTaskDo.Alias() }

func (g gosmoAgentTask) Columns(cols ...field.Expr) gen.Columns {
	return g.gosmoAgentTaskDo.Columns(cols...)
}

func (g *gosmoAgentTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gosmoAgentTask) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 13)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["start_time"] = g.StartTime
	g.fieldMap["stop_time"] = g.StopTime
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["create_by_name"] = g.CreateByName
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["update_by"] = g.UpdateBy
	g.fieldMap["update_by_name"] = g.UpdateByName
	g.fieldMap["remote_task_id"] = g.RemoteTaskID
	g.fieldMap["type"] = g.Type
}

func (g gosmoAgentTask) clone(db *gorm.DB) gosmoAgentTask {
	g.gosmoAgentTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gosmoAgentTask) replaceDB(db *gorm.DB) gosmoAgentTask {
	g.gosmoAgentTaskDo.ReplaceDB(db)
	return g
}

type gosmoAgentTaskDo struct{ gen.DO }

type IGosmoAgentTaskDo interface {
	gen.SubQuery
	Debug() IGosmoAgentTaskDo
	WithContext(ctx context.Context) IGosmoAgentTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGosmoAgentTaskDo
	WriteDB() IGosmoAgentTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGosmoAgentTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGosmoAgentTaskDo
	Not(conds ...gen.Condition) IGosmoAgentTaskDo
	Or(conds ...gen.Condition) IGosmoAgentTaskDo
	Select(conds ...field.Expr) IGosmoAgentTaskDo
	Where(conds ...gen.Condition) IGosmoAgentTaskDo
	Order(conds ...field.Expr) IGosmoAgentTaskDo
	Distinct(cols ...field.Expr) IGosmoAgentTaskDo
	Omit(cols ...field.Expr) IGosmoAgentTaskDo
	Join(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo
	Group(cols ...field.Expr) IGosmoAgentTaskDo
	Having(conds ...gen.Condition) IGosmoAgentTaskDo
	Limit(limit int) IGosmoAgentTaskDo
	Offset(offset int) IGosmoAgentTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentTaskDo
	Unscoped() IGosmoAgentTaskDo
	Create(values ...*model.GosmoAgentTask) error
	CreateInBatches(values []*model.GosmoAgentTask, batchSize int) error
	Save(values ...*model.GosmoAgentTask) error
	First() (*model.GosmoAgentTask, error)
	Take() (*model.GosmoAgentTask, error)
	Last() (*model.GosmoAgentTask, error)
	Find() ([]*model.GosmoAgentTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentTask, err error)
	FindInBatches(result *[]*model.GosmoAgentTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GosmoAgentTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGosmoAgentTaskDo
	Assign(attrs ...field.AssignExpr) IGosmoAgentTaskDo
	Joins(fields ...field.RelationField) IGosmoAgentTaskDo
	Preload(fields ...field.RelationField) IGosmoAgentTaskDo
	FirstOrInit() (*model.GosmoAgentTask, error)
	FirstOrCreate() (*model.GosmoAgentTask, error)
	FindByPage(offset int, limit int) (result []*model.GosmoAgentTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGosmoAgentTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gosmoAgentTaskDo) Debug() IGosmoAgentTaskDo {
	return g.withDO(g.DO.Debug())
}

func (g gosmoAgentTaskDo) WithContext(ctx context.Context) IGosmoAgentTaskDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gosmoAgentTaskDo) ReadDB() IGosmoAgentTaskDo {
	return g.Clauses(dbresolver.Read)
}

func (g gosmoAgentTaskDo) WriteDB() IGosmoAgentTaskDo {
	return g.Clauses(dbresolver.Write)
}

func (g gosmoAgentTaskDo) Session(config *gorm.Session) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Session(config))
}

func (g gosmoAgentTaskDo) Clauses(conds ...clause.Expression) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gosmoAgentTaskDo) Returning(value interface{}, columns ...string) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gosmoAgentTaskDo) Not(conds ...gen.Condition) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gosmoAgentTaskDo) Or(conds ...gen.Condition) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gosmoAgentTaskDo) Select(conds ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gosmoAgentTaskDo) Where(conds ...gen.Condition) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gosmoAgentTaskDo) Order(conds ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gosmoAgentTaskDo) Distinct(cols ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gosmoAgentTaskDo) Omit(cols ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gosmoAgentTaskDo) Join(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gosmoAgentTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gosmoAgentTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gosmoAgentTaskDo) Group(cols ...field.Expr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gosmoAgentTaskDo) Having(conds ...gen.Condition) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gosmoAgentTaskDo) Limit(limit int) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gosmoAgentTaskDo) Offset(offset int) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gosmoAgentTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gosmoAgentTaskDo) Unscoped() IGosmoAgentTaskDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gosmoAgentTaskDo) Create(values ...*model.GosmoAgentTask) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gosmoAgentTaskDo) CreateInBatches(values []*model.GosmoAgentTask, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gosmoAgentTaskDo) Save(values ...*model.GosmoAgentTask) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gosmoAgentTaskDo) First() (*model.GosmoAgentTask, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentTask), nil
	}
}

func (g gosmoAgentTaskDo) Take() (*model.GosmoAgentTask, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentTask), nil
	}
}

func (g gosmoAgentTaskDo) Last() (*model.GosmoAgentTask, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentTask), nil
	}
}

func (g gosmoAgentTaskDo) Find() ([]*model.GosmoAgentTask, error) {
	result, err := g.DO.Find()
	return result.([]*model.GosmoAgentTask), err
}

func (g gosmoAgentTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GosmoAgentTask, err error) {
	buf := make([]*model.GosmoAgentTask, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gosmoAgentTaskDo) FindInBatches(result *[]*model.GosmoAgentTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gosmoAgentTaskDo) Attrs(attrs ...field.AssignExpr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gosmoAgentTaskDo) Assign(attrs ...field.AssignExpr) IGosmoAgentTaskDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gosmoAgentTaskDo) Joins(fields ...field.RelationField) IGosmoAgentTaskDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gosmoAgentTaskDo) Preload(fields ...field.RelationField) IGosmoAgentTaskDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gosmoAgentTaskDo) FirstOrInit() (*model.GosmoAgentTask, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentTask), nil
	}
}

func (g gosmoAgentTaskDo) FirstOrCreate() (*model.GosmoAgentTask, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GosmoAgentTask), nil
	}
}

func (g gosmoAgentTaskDo) FindByPage(offset int, limit int) (result []*model.GosmoAgentTask, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gosmoAgentTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gosmoAgentTaskDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gosmoAgentTaskDo) Delete(models ...*model.GosmoAgentTask) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gosmoAgentTaskDo) withDO(do gen.Dao) *gosmoAgentTaskDo {
	g.DO = *do.(*gen.DO)
	return g
}
