// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	PolarisResourceAgent *polarisResourceAgent
	PolarisTaskRecord    *polarisTaskRecord
	PolarisTrafficPool   *polarisTrafficPool
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	PolarisResourceAgent = &Q.PolarisResourceAgent
	PolarisTaskRecord = &Q.PolarisTaskRecord
	PolarisTrafficPool = &Q.PolarisTrafficPool
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		PolarisResourceAgent: newPolarisResourceAgent(db, opts...),
		PolarisTaskRecord:    newPolarisTaskRecord(db, opts...),
		PolarisTrafficPool:   newPolarisTrafficPool(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	PolarisResourceAgent polarisResourceAgent
	PolarisTaskRecord    polarisTaskRecord
	PolarisTrafficPool   polarisTrafficPool
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		PolarisResourceAgent: q.PolarisResourceAgent.clone(db),
		PolarisTaskRecord:    q.PolarisTaskRecord.clone(db),
		PolarisTrafficPool:   q.PolarisTrafficPool.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		PolarisResourceAgent: q.PolarisResourceAgent.replaceDB(db),
		PolarisTaskRecord:    q.PolarisTaskRecord.replaceDB(db),
		PolarisTrafficPool:   q.PolarisTrafficPool.replaceDB(db),
	}
}

type queryCtx struct {
	PolarisResourceAgent IPolarisResourceAgentDo
	PolarisTaskRecord    IPolarisTaskRecordDo
	PolarisTrafficPool   IPolarisTrafficPoolDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PolarisResourceAgent: q.PolarisResourceAgent.WithContext(ctx),
		PolarisTaskRecord:    q.PolarisTaskRecord.WithContext(ctx),
		PolarisTrafficPool:   q.PolarisTrafficPool.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
