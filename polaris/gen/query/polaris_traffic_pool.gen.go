// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"polaris/gen/model"
)

func newPolarisTrafficPool(db *gorm.DB, opts ...gen.DOOption) polarisTrafficPool {
	_polarisTrafficPool := polarisTrafficPool{}

	_polarisTrafficPool.polarisTrafficPoolDo.UseDB(db, opts...)
	_polarisTrafficPool.polarisTrafficPoolDo.UseModel(&model.PolarisTrafficPool{})

	tableName := _polarisTrafficPool.polarisTrafficPoolDo.TableName()
	_polarisTrafficPool.ALL = field.NewAsterisk(tableName)
	_polarisTrafficPool.ID = field.NewInt64(tableName, "id")
	_polarisTrafficPool.Content = field.NewString(tableName, "content")
	_polarisTrafficPool.TaskID = field.NewString(tableName, "task_id")
	_polarisTrafficPool.IsDeleted = field.NewBool(tableName, "is_deleted")
	_polarisTrafficPool.DeletedTime = field.NewTime(tableName, "deleted_time")
	_polarisTrafficPool.DeletedBy = field.NewString(tableName, "deleted_by")
	_polarisTrafficPool.DeletedByName = field.NewString(tableName, "deleted_by_name")
	_polarisTrafficPool.CreateTime = field.NewTime(tableName, "create_time")
	_polarisTrafficPool.CreateBy = field.NewString(tableName, "create_by")
	_polarisTrafficPool.CreateByName = field.NewString(tableName, "create_by_name")
	_polarisTrafficPool.UpdateTime = field.NewTime(tableName, "update_time")
	_polarisTrafficPool.UpdateBy = field.NewString(tableName, "update_by")
	_polarisTrafficPool.UpdateByName = field.NewString(tableName, "update_by_name")
	_polarisTrafficPool.APIID = field.NewString(tableName, "api_id")

	_polarisTrafficPool.fillFieldMap()

	return _polarisTrafficPool
}

type polarisTrafficPool struct {
	polarisTrafficPoolDo polarisTrafficPoolDo

	ALL           field.Asterisk
	ID            field.Int64
	Content       field.String
	TaskID        field.String
	IsDeleted     field.Bool
	DeletedTime   field.Time
	DeletedBy     field.String
	DeletedByName field.String
	CreateTime    field.Time
	CreateBy      field.String
	CreateByName  field.String
	UpdateTime    field.Time
	UpdateBy      field.String
	UpdateByName  field.String
	APIID         field.String

	fieldMap map[string]field.Expr
}

func (p polarisTrafficPool) Table(newTableName string) *polarisTrafficPool {
	p.polarisTrafficPoolDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p polarisTrafficPool) As(alias string) *polarisTrafficPool {
	p.polarisTrafficPoolDo.DO = *(p.polarisTrafficPoolDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *polarisTrafficPool) updateTableName(table string) *polarisTrafficPool {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Content = field.NewString(table, "content")
	p.TaskID = field.NewString(table, "task_id")
	p.IsDeleted = field.NewBool(table, "is_deleted")
	p.DeletedTime = field.NewTime(table, "deleted_time")
	p.DeletedBy = field.NewString(table, "deleted_by")
	p.DeletedByName = field.NewString(table, "deleted_by_name")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewString(table, "create_by")
	p.CreateByName = field.NewString(table, "create_by_name")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.UpdateBy = field.NewString(table, "update_by")
	p.UpdateByName = field.NewString(table, "update_by_name")
	p.APIID = field.NewString(table, "api_id")

	p.fillFieldMap()

	return p
}

func (p *polarisTrafficPool) WithContext(ctx context.Context) IPolarisTrafficPoolDo {
	return p.polarisTrafficPoolDo.WithContext(ctx)
}

func (p polarisTrafficPool) TableName() string { return p.polarisTrafficPoolDo.TableName() }

func (p polarisTrafficPool) Alias() string { return p.polarisTrafficPoolDo.Alias() }

func (p polarisTrafficPool) Columns(cols ...field.Expr) gen.Columns {
	return p.polarisTrafficPoolDo.Columns(cols...)
}

func (p *polarisTrafficPool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *polarisTrafficPool) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["content"] = p.Content
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["is_deleted"] = p.IsDeleted
	p.fieldMap["deleted_time"] = p.DeletedTime
	p.fieldMap["deleted_by"] = p.DeletedBy
	p.fieldMap["deleted_by_name"] = p.DeletedByName
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_by_name"] = p.CreateByName
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_by_name"] = p.UpdateByName
	p.fieldMap["api_id"] = p.APIID
}

func (p polarisTrafficPool) clone(db *gorm.DB) polarisTrafficPool {
	p.polarisTrafficPoolDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p polarisTrafficPool) replaceDB(db *gorm.DB) polarisTrafficPool {
	p.polarisTrafficPoolDo.ReplaceDB(db)
	return p
}

type polarisTrafficPoolDo struct{ gen.DO }

type IPolarisTrafficPoolDo interface {
	gen.SubQuery
	Debug() IPolarisTrafficPoolDo
	WithContext(ctx context.Context) IPolarisTrafficPoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPolarisTrafficPoolDo
	WriteDB() IPolarisTrafficPoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPolarisTrafficPoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPolarisTrafficPoolDo
	Not(conds ...gen.Condition) IPolarisTrafficPoolDo
	Or(conds ...gen.Condition) IPolarisTrafficPoolDo
	Select(conds ...field.Expr) IPolarisTrafficPoolDo
	Where(conds ...gen.Condition) IPolarisTrafficPoolDo
	Order(conds ...field.Expr) IPolarisTrafficPoolDo
	Distinct(cols ...field.Expr) IPolarisTrafficPoolDo
	Omit(cols ...field.Expr) IPolarisTrafficPoolDo
	Join(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo
	Group(cols ...field.Expr) IPolarisTrafficPoolDo
	Having(conds ...gen.Condition) IPolarisTrafficPoolDo
	Limit(limit int) IPolarisTrafficPoolDo
	Offset(offset int) IPolarisTrafficPoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisTrafficPoolDo
	Unscoped() IPolarisTrafficPoolDo
	Create(values ...*model.PolarisTrafficPool) error
	CreateInBatches(values []*model.PolarisTrafficPool, batchSize int) error
	Save(values ...*model.PolarisTrafficPool) error
	First() (*model.PolarisTrafficPool, error)
	Take() (*model.PolarisTrafficPool, error)
	Last() (*model.PolarisTrafficPool, error)
	Find() ([]*model.PolarisTrafficPool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisTrafficPool, err error)
	FindInBatches(result *[]*model.PolarisTrafficPool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PolarisTrafficPool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPolarisTrafficPoolDo
	Assign(attrs ...field.AssignExpr) IPolarisTrafficPoolDo
	Joins(fields ...field.RelationField) IPolarisTrafficPoolDo
	Preload(fields ...field.RelationField) IPolarisTrafficPoolDo
	FirstOrInit() (*model.PolarisTrafficPool, error)
	FirstOrCreate() (*model.PolarisTrafficPool, error)
	FindByPage(offset int, limit int) (result []*model.PolarisTrafficPool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPolarisTrafficPoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p polarisTrafficPoolDo) Debug() IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Debug())
}

func (p polarisTrafficPoolDo) WithContext(ctx context.Context) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p polarisTrafficPoolDo) ReadDB() IPolarisTrafficPoolDo {
	return p.Clauses(dbresolver.Read)
}

func (p polarisTrafficPoolDo) WriteDB() IPolarisTrafficPoolDo {
	return p.Clauses(dbresolver.Write)
}

func (p polarisTrafficPoolDo) Session(config *gorm.Session) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Session(config))
}

func (p polarisTrafficPoolDo) Clauses(conds ...clause.Expression) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p polarisTrafficPoolDo) Returning(value interface{}, columns ...string) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p polarisTrafficPoolDo) Not(conds ...gen.Condition) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p polarisTrafficPoolDo) Or(conds ...gen.Condition) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p polarisTrafficPoolDo) Select(conds ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p polarisTrafficPoolDo) Where(conds ...gen.Condition) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p polarisTrafficPoolDo) Order(conds ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p polarisTrafficPoolDo) Distinct(cols ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p polarisTrafficPoolDo) Omit(cols ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p polarisTrafficPoolDo) Join(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p polarisTrafficPoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p polarisTrafficPoolDo) RightJoin(table schema.Tabler, on ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p polarisTrafficPoolDo) Group(cols ...field.Expr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p polarisTrafficPoolDo) Having(conds ...gen.Condition) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p polarisTrafficPoolDo) Limit(limit int) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p polarisTrafficPoolDo) Offset(offset int) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p polarisTrafficPoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p polarisTrafficPoolDo) Unscoped() IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Unscoped())
}

func (p polarisTrafficPoolDo) Create(values ...*model.PolarisTrafficPool) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p polarisTrafficPoolDo) CreateInBatches(values []*model.PolarisTrafficPool, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p polarisTrafficPoolDo) Save(values ...*model.PolarisTrafficPool) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p polarisTrafficPoolDo) First() (*model.PolarisTrafficPool, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTrafficPool), nil
	}
}

func (p polarisTrafficPoolDo) Take() (*model.PolarisTrafficPool, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTrafficPool), nil
	}
}

func (p polarisTrafficPoolDo) Last() (*model.PolarisTrafficPool, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTrafficPool), nil
	}
}

func (p polarisTrafficPoolDo) Find() ([]*model.PolarisTrafficPool, error) {
	result, err := p.DO.Find()
	return result.([]*model.PolarisTrafficPool), err
}

func (p polarisTrafficPoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PolarisTrafficPool, err error) {
	buf := make([]*model.PolarisTrafficPool, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p polarisTrafficPoolDo) FindInBatches(result *[]*model.PolarisTrafficPool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p polarisTrafficPoolDo) Attrs(attrs ...field.AssignExpr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p polarisTrafficPoolDo) Assign(attrs ...field.AssignExpr) IPolarisTrafficPoolDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p polarisTrafficPoolDo) Joins(fields ...field.RelationField) IPolarisTrafficPoolDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p polarisTrafficPoolDo) Preload(fields ...field.RelationField) IPolarisTrafficPoolDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p polarisTrafficPoolDo) FirstOrInit() (*model.PolarisTrafficPool, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTrafficPool), nil
	}
}

func (p polarisTrafficPoolDo) FirstOrCreate() (*model.PolarisTrafficPool, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PolarisTrafficPool), nil
	}
}

func (p polarisTrafficPoolDo) FindByPage(offset int, limit int) (result []*model.PolarisTrafficPool, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p polarisTrafficPoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p polarisTrafficPoolDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p polarisTrafficPoolDo) Delete(models ...*model.PolarisTrafficPool) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *polarisTrafficPoolDo) withDO(do gen.Dao) *polarisTrafficPoolDo {
	p.DO = *do.(*gen.DO)
	return p
}
